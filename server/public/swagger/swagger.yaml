openapi: 3.0.1
info:
  version: v1
  title: Pong API
  description: Pong API
paths:
  "/api/chats/":
    get:
      summary: Retrieves chats
      tags:
        - Chats
      responses:
        '200':
          description: chats found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Creates a chat
      tags:
        - Chats
      parameters: [ ]
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  "/api/chats/{id}":
    get:
      summary: Retrieves a chat
      tags:
        - Chats
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: chat found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/chat"
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Deletes a chat
      tags:
        - Chats
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: chat deleted
          content: { }
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  "/api/guilds/":
    get:
      summary: Retrieves guilds
      tags:
        - Guilds
      responses:
        '200':
          description: guilds found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/guild"
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Creates a guild
      tags:
        - Guilds
      parameters: [ ]
      responses:
        '201':
          $ref: '#/components/responses/201'
        '422':
          $ref: '#/components/responses/422'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/guild'

  "/api/guilds/{id}":
    get:
      summary: Retrieves a guild
      tags:
        - Guilds
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: guild found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/guild_response"
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Updates a guild
      tags:
        - Guilds
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/guild'
      responses:
        '200':
          description: guild found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/guild_response"
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Deletes a guild
      tags:
        - Guilds
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: guild deleted
          content: { }
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  "/api/states/{id}":
    get:
      summary: Retrieves a user state
      tags:
        - States
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: user state found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/state"
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  "/api/states":
    get:
      summary: Retrieves all states
      tags:
        - States
      responses:
        '200':
          description: states found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/state"
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  "/api/game_records":
    get:
      summary: Retrieves all games played
      tags:
        - GameRecords
      parameters:
        - in: query
          name: user_id
          schema:
            type: integer
          description: filter by user_id (either win or loose)
        - in: query
          name: type_id
          schema:
            type: integer
          description: filter by game type_id (duel/ladder/tournament)
      responses:
        '200':
          description: Matchs found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/arrayOfGames"
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  "/api/ladders/{id}":
    get:
      summary: Retrieves a ladder
      tags:
        - Ladders
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ladder found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ladder"
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  "/api/ladders":
    get:
      summary: Retrieves all ladders
      tags:
        - Ladders
      responses:
        '200':
          description: ladders found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ladder"
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  "/api/users":
    get:
      summary: Retrieves users
      tags:
        - Users
      parameters:
        - in: query
          name: ladder_id
          schema:
            type: integer
          description: filter by ladder_id
        - in: query
          name: guild_id
          schema:
            type: integer
          description: filter by guid_id
        - in: query
          name: state_id
          schema:
            type: integer
          description: filter by state_id
      responses:
        '200':
          description: users found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user_response"
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  "/api/users/{id}":
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    patch:
      summary: Modifies an user
      tags:
        - Users
      operationId: patchUser
      parameters: [ ]
      responses:
        '200':
          description: user modified
          content:
            application/json:
              schema:
                oneOf:
                  - "$ref": "#/components/schemas/user_response"
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                two_factor:
                  type: boolean
                first_login:
                  type: boolean
                nickname:
                  type: string
    get:
      summary: Retrieves an user
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: user found
          content:
            application/json:
              schema:
                oneOf:
                  - "$ref": "#/components/schemas/user_response"
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Deletes an user
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: user deleted
          content: { }
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  "/api/users/{id}/avatar":
    post:
      summary: Upload an user avatar
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        '200':
          description: avatar created
          content:
            application/json:
              schema:
                type: object
                properties:
                  image_url:
                    type: string
servers:
  - url: http://{defaultHost}:3000
    variables:
      defaultHost:
        default: localhost
security:
  - client: []
    access_token: []
    uid: []
components:
  securitySchemes:
    client:
      type: apiKey
      name: client
      in: header
    access_token:
      type: apiKey
      name: access-token
      in: header
    uid:
      type: apiKey
      name: uid
      in: header
  schemas:
    arrayOfGames:
      type: array
      items:
        $ref:  '#/components/schemas/gameRecord'
    gameRecord:
      type: object
      properties:
        winner_id:
          type: integer
          description: user_id
        looser_id:
          type: integer
          description: user_id
        type_id:
          type: integer
        created_at:
          type: string
    user:
      type: object
      properties:
        image_url:
          type: string
        guild_id:
          type: integer
          nullable: true
        state_id:
          type: integer
          nullable: true
        ladder_id:
          type: integer
          nullable: true
        two_factor:
          type: boolean
        first_login:
          type: boolean
        nickname:
          type: string
        ladder_games_won:
          type: integer
        ladder_games_lost:
          type: integer
        uid:
          type: string
        chat_ids:
          $ref: '#/components/schemas/integer_list'
    guild_response:
      allOf:
        - type: object
          properties:
            id:
              type: string
            score:
              type: integer
        - $ref: "#/components/schemas/guild"
    user_response:
      allOf:
        - type: object
          properties:
            id:
              type: string
        - $ref: "#/components/schemas/user"
    ladder:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        desc:
          type: string
          nullable: true
      required:
        - name
    state:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      required:
        - name
    guild:
      type: object
      properties:
        name:
          type: string
        anagram:
          type: string
        owner_id:
          type: integer
        officer_ids:
          $ref: '#/components/schemas/integer_list'
    chat:
      type: object
      properties:
        id:
          type: integer
        privacy:
          type: integer
        owner_id:
          type: integer
        admin_ids:
          $ref: '#/components/schemas/integer_list'
        participant_ids:
          $ref: '#/components/schemas/integer_list'
        timeout_ids:
          $ref: '#/components/schemas/integer_list'
        ban_ids:
          $ref: '#/components/schemas/integer_list'
    integer_list:
      type: array
      items:
        type: integer

    errors_object:
      type: object
      properties:
        errors:
          $ref: '#/components/schemas/errors_map'
    errors_map:
      type: object
      additionalProperties:
        type: array
        items:
          type: string

  responses:
    '201':
      description: Created
      content: { }
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errors_map'
    '401':
      description: The user is not authenticated in the system
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errors_map'
    '403':
      description: The user does not have permissions to access this endpoint
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errors_map'
    '404':
      description: Data not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errors_map'
    '422':
      description: invalid request
      content: { }
    '500':
      description: Internal server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errors_map'